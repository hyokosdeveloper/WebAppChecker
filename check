#!/bin/bash


set -e

function cleanup {
  for pid in "${PIDS[@]}"
  do
    kill -0 $pid 2&> /dev/null && kill $pid
  done
  exit 0
}

function position {
  # based on a script from http://invisible-island.net/xterm/xterm.faq.html
  exec < /dev/tty
  oldstty=$(stty -g)
  stty raw -echo min 0

  # on my system, the following line can be replaced by the line below it
  # echo -en "\033[6n" > /dev/tty
  tput u7 > /dev/tty    # when TERM=xterm (and relatives)
  IFS=';' read -r -d R -a pos
  stty $oldstty

  # change from one-based to zero based so they work with: tput cup $row $col
  row=$((${pos[0]:2} - 1))    # strip off the esc-[
  col=$((${pos[1]} - 1))

  echo "$row"
}

function monitor {
  local url=$1
  local p=$((START_CURSOR+$2+1))

      # -w "$GREEN%{http_code}$RESET $url \\033[${p};${TIMING_COL}f%{time_total}s TTFB: %{time_connect} + %{time_starttransfer} (%{size_download})" \

  echo -e "\033[${p};0f$(curl $url --compress -s -o /dev/null -w \
    "%{http_code}|%{time_total}|%{time_pretransfer}|%{time_starttransfer}\n"\
      | sed -n '/^/ s///p' \
      | while IFS='|' read http_code time_total time_pretransfer time_starttransfer;
      do
        if [[ $http_code > 399 ]]; then
          http_code="$Black$On_Red$http_code$RESET"
        else
          http_code="$White$On_Green$http_code$RESET"
        fi
        TTFB=$(echo -e "$time_starttransfer $time_pretransfer" | awk '{ printf "%.3fs", $1 - $2 }')
        
        echo -e "$http_code $url $IGreen\\033[${p};${TIMING_COL}f${time_total}$RESET $BPurple Total Seconds To Test $RESET -- $BYellow TimeToFirstByte $RESET $IWhite$TTFB$RESET)"
        # -- Original --
        #echo -e "$http_code $url \\033[${p};${TIMING_COL}f${time_total}s (TTFB $TTFB)"
    done)\n\033[${LAST_CURSOR};0f" &

  PIDS=("${PIDS[@]}" "$!")
}

declare -a PIDS
RED="\033[31m"
RESET="\033[0m"
GREEN="\033[32m"

Black='\033[0;30m'        # Black
White='\033[0;37m'        # White
On_Red='\033[41m'         # Red
On_Green='\033[42m'       # Green
# High Intensity
IBlack='\033[0;90m'       # Black
IRed='\033[0;91m'         # Red
IGreen='\033[0;92m'       # Green
IYellow='\033[0;93m'      # Yellow
IBlue='\033[0;94m'        # Blue
IPurple='\033[0;95m'      # Purple
ICyan='\033[0;96m'        # Cyan
IWhite='\033[0;97m'       # White
# High Intensity backgrounds
On_IBlack='\033[0;100m'   # Black
On_IRed='\033[0;101m'     # Red
On_IGreen='\033[0;102m'   # Green
On_IYellow='\033[0;103m'  # Yellow
On_IBlue='\033[0;104m'    # Blue
On_IPurple='\033[0;105m'  # Purple
On_ICyan='\033[0;106m'    # Cyan
On_IWhite='\033[0;107m'   # White
# Bold
BBlack='\033[1;30m'       # Black
BRed='\033[1;31m'         # Red
BGreen='\033[1;32m'       # Green
BYellow='\033[1;33m'      # Yellow
BBlue='\033[1;34m'        # Blue
BPurple='\033[1;35m'      # Purple
BCyan='\033[1;36m'        # Cyan
BWhite='\033[1;37m'       # White

START_CURSOR=$(position)
LAST_CURSOR=0
TIMING_COL=0
declare -a URLS

if [ -t 0 ]; then
  if [ $# -eq 0 ]
    then
    echo -e "Usage:\n\n  ${RED}check${RESET} <url>\n  cat urls.txt | \033[1mcheck${RESET}\n"
    exit 1
  else
    URLS=($1)
  fi
else
  while read line
  do
      URLS=("${URLS[@]}" $line)
  done
fi

trap cleanup EXIT

for url in "${URLS[@]}"
do
  length=${#url}
  if [[ $length > $TIMING_COL ]]; then TIMING_COL=$length; fi
  echo -e "... $url"
done

TIMING_COL=$(( $TIMING_COL + 6))
LAST_CURSOR=$(position)

if [[ $LAST_CURSOR == $(( $(tput lines) - 1 )) ]]
  then
  START_CURSOR=$(( LAST_CURSOR - ${#URLS[@]}))
fi

for index in "${!URLS[@]}"
do
  monitor ${URLS[index]} $index
done

wait ${PIDS[@]}
